## ode-model.properties
## --------------------
##
## DO NOT EDIT!
##
## This properties file is compiled into ode-model.jar and serves as a default
## for all server-side values (client configuration happens differently).
##
## Any of these properties can be altered by using bin/ode config. MODIFYING
## THIS FILE DOES NOT ALTER SERVER BEHAVIOR. It solely defines the defaults
## at compile time!
##
## For an overview of these properties, see
## https://docs.bhojpur.net/latest/ode/sysadmins/config.html
##
## Properties marked with "DEVELOPMENT" should not be used in production.

# Name of the Bhojpur ODE component that is running in this process.
ode.name=Server

ode.data.dir=/ODE/
ode.managed.dir=${ode.data.dir}/ManagedRepository

# Version of the database which is in use. This
# value typically matches the major.minor version
# of the server that it is being used with. Typically,
# only developers will change this version to bump
# to a new major version.
ode.db.version=ODE1.0

# The patch version of the database which is in use.
# This value need not match the patch version of the
# server that is is being used with. Any changes by
# developers to the database schema will result in
# a bump to this value.
ode.db.patch=0

ode.db.prepared_statement_cache_size=10

# Default values for the current profile will be
# hard-coded into the hibernate.properties file
# in the `model-*.jar`. By using a different jar,
# you can modify the defaults.
#
# Note: some other properties are defined in
# the file :file:`etc/profiles/${ode.db.profile}`
# Especially of importance is :property:`ode.db.port`
# Set during the build
ode.db.profile=

# Whether JMX statistics are collected
# for DB usage (by Hibernate, etc)
ode.db.statistics=true

# The host name of the machine on which the database server is running.
# A TCP port must be accessible from the server on which Bhojpur ODE is running.
ode.db.host=localhost

# The name of the database instance to which Bhojpur ODE will connect.
ode.db.name=ode

# The username to use to connect to the database server
ode.db.user=ode

# The password to use to connect to the database server
ode.db.pass=ode

# The string that will be used as the base for LSIDs
# in all exported Bhojpur ODE objects including ODE-XML and
# ODE-TIFF. It's usually not necessary to modify this
# value since the database UUID (stored in the database)
# is sufficient to uniquely identify the source.
ode.db.authority=export.bhojpur.net

# Sets the number of database server connections which
# will be used by ODE.
#
# A sizeable increase in this value, e.g. to 100, will
# significantly increase the performance of your server,
# but your database installation will need to be configured
# to accept *at least* as many, preferably more, connections
# as this value.
#
# The related values ode.threads.max_threads and
# ode.threads.background_threads do *not* need to be
# increased by the same amount. A system will be more stable
# if background_threads is less than max_threads and
# max_threads is less than poolsize.
ode.db.poolsize=10

# Properties to set on ODE.server's JDBC connection to the database.
# See https://jdbc.postgresql.org/documentation/head/connect.html
ode.db.properties=

# The URL specifying how the Java driver connects to the database system.
ode.db.url=jdbc:postgresql://${ode.db.host}:${ode.db.port}/${ode.db.name}?ApplicationName=ODE.${ode.name}&${ode.db.properties}

# Polling frequency of the pixeldata processing. Set empty to disable
# pixeldata processing.
#
# .. |cron| replace::
#   Cron Format: seconds minutes hours day-of-month month day-of-week year
#   (optional). For example, "0,30 * * * * ?" is equivalent to running every
#   30 seconds. See
#   https://www.quartz-scheduler.org/api/1.8.6/org/quartz/CronExpression.html
#
# .. _Quartz Job Scheduler:
#   https://www.quartz-scheduler.org/downloads/
#
# |cron|
ode.pixeldata.cron=*/4 * * * * ?

# How many pixel pyramids will be generated
# at a single time. The value should typically
# not be set to higher than the number of
# cores on the server machine.
ode.pixeldata.threads=2

# EventLogLoader that will be used for loading EventLogs for
# the action "PIXELDATA". Choices include: pixelDataEventLogQueue
# and the older pixelDataPersistentEventLogLoader
ode.pixeldata.event_log_loader=pixelDataEventLogQueue

# Number of instances indexed per indexing.
# (Ignored by pixelDataEventLogQueue)
ode.pixeldata.batch=50

# Instead, it is possible to tell the server
# to run more pixeldata repetitions, each of
# which gets completely committed before the
# next. This will only occur when there is
# a substantial backlog of pixels to process.
#
# (Ignored by pixelDataEventLogQueue; uses threads instead)
ode.pixeldata.repetitions=1

# Name of the spring bean which will be used
# to calculate the backoff (in ms) that users
# should wait for an image to be ready to view.
ode.pixeldata.backoff=ode.io.nio.SimpleBackOff
# A default value for the backoff time.
ode.pixeldata.backoff.default=1000
# The maximum number of pixels (in any dimension),
# if exceeded the default value will be used.
ode.pixeldata.backoff.maxpixels=1000000

# Maximum time in milliseconds that file parsing
# can take without the parsed metadata being
# cached to ode.pixeldata.memoizer.dir.
ode.pixeldata.memoizer_wait=0

# Whether the PixelData.dispose() method should
# try to clean up ByteBuffer instances which may
# lead to memory exceptions. Note: the property is
# set globally for the JVM.
ode.pixeldata.dispose=true

# The directory in which Bhojpur ODE-Formats may create
# memo files for images from the managed repository.
ode.pixeldata.memoizer.dir=${ode.data.dir}/OdeFormatsCache

# For read-only servers set this to a local
# read-write directory so that memo files
# can be created and used. Activates only if
# the binary repository is read-only.
ode.pixeldata.memoizer.dir.local=

# Default sizes for tiles are provided by a
# ode.io.nio.TileSizes implementation. By default
# the bean ("configuredTileSizes") uses the properties
# provided here.
ode.pixeldata.tile_sizes_bean=configuredTileSizes
ode.pixeldata.tile_width=256
ode.pixeldata.tile_height=256

# With :property:`ode.pixeldata.max_plane_height`, specifies
# the plane size cutoff above which a pixel pyramid will be
# generated by the pixeldata service unless subresolutions
# can be read from the file format.
# These values will be ignored for floating or double pixel
# data types unlesss :property: `ode.pixeldata.max_plane_float_override`
# is set to false.
# Note pyramids are never generated for floating point pixel types.
ode.pixeldata.max_plane_width=3192

# With :property:`ode.pixeldata.max_plane_width`, specifies
# the plane size cutoff above which a pixel pyramid will be
# generated by the pixeldata service unless subresolutions
# can be read from the file format.
# These values will be ignored for floating or double pixel
# data types unlesss :property: `ode.pixeldata.max_plane_float_override`
# is set to false.
# Note pyramids are never generated for floating point pixel types.
ode.pixeldata.max_plane_height=3192

# Specifies the maximum number of bytes the server will
# allow to be projected in real time with the rendering
# engine.
ode.pixeldata.max_projection_bytes=268435456

# If true, server will not require pyramids
# for floating point pixel types.
# Note that pyramids are never generated for floating
# point pixel types.
ode.pixeldata.max_plane_float_override=true