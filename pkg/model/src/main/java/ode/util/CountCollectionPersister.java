package ode.util;

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import java.io.Serializable;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.HibernateException;
import org.hibernate.cache.access.CollectionRegionAccessStrategy;
import org.hibernate.cfg.Configuration;
import org.hibernate.collection.PersistentCollection;
import org.hibernate.engine.SessionFactoryImplementor;
import org.hibernate.engine.SessionImplementor;
import org.hibernate.mapping.Collection;
import org.hibernate.persister.collection.BasicCollectionPersister;
import org.hibernate.persister.collection.CollectionPersister;

/**
 * {@link CollectionPersister} which knows how to handle the count views
 * generated by dsl/resources/ode/dsl/views.dm. In general, attempts to data
 * modifications and properly loads the counts.
 */
public class CountCollectionPersister extends BasicCollectionPersister {

    private static Logger log = LoggerFactory.getLogger(CountCollectionPersister.class);

    public CountCollectionPersister(Collection collection,
            CollectionRegionAccessStrategy regions, Configuration cfg,
            SessionFactoryImplementor factory) {
        super(collection, regions, cfg, factory);
    }

    @Override
    public void insertRows(PersistentCollection collection, Serializable id,
            SessionImplementor session) throws HibernateException {
        // Do nothing
    }

    @Override
    protected int doUpdateRows(Serializable id,
            PersistentCollection collection, SessionImplementor session)
            throws HibernateException {
        return 0;
    }

    @Override
    public void updateRows(PersistentCollection collection, Serializable id,
            SessionImplementor session) throws HibernateException {
        // Do nothing
    }

    @Override
    public void deleteRows(PersistentCollection collection, Serializable id,
            SessionImplementor session) throws HibernateException {
        // Do nothing
    }

    @Override
    public void remove(Serializable id, SessionImplementor session)
            throws HibernateException {
        // Do nothing
    }
}