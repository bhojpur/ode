{% def indexes_string(indexes) %}${", ".join(map(lambda x: lang.index_string(x),indexes))}{% end %}\
\
{% def index_name_string(name) %}\
{% choose %}\
{% when name[:2].isupper()%}${name}Index{% end %}\
{% otherwise %}${name[:1].lower()}${name[1:]}Index{% end %}\
{% end %}\
{% end %}\
\
{% def index_string(name) %}int ${index_name_string(name)}{% end %}\
\
{% def counter(parent, obj, indexes) %}\
  public int get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}Count(${indexes_string(indexes[:-1])})
  {
{% if debug %}\
    // MARKER [A-IMP]
    // Parents: ${repr(parents[obj.name])}
{% end debug %}\
{% if obj.isReference %}\
    // ${obj.name} is a reference
    return ${join_accessors(obj.name, parent, obj.name, -1, ["sizeOfLinked%sList()" % obj.name.replace('Ref', '')])};
{% end %}\
{% if not obj.isReference %}\
    // ${obj.name} is not a reference
    return ${join_accessors(obj.name, parent, obj.name, -1, ["sizeOf%sList()" % obj.name.replace('Ref', '')])};
{% end %}\
  }
{% end %}\
\
{% def getter(parent, obj, prop, indexes) %}\
{% choose %}\
{% when len(indexes) > 0 and prop.maxOccurs > 1 %}\
  public ${prop.metadataStoreRetType} get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}{% if not prop.hasBaseAttribute %}${prop.name}{% end %}(${indexes_string(indexes)}, ${index_string(prop.name)})
{% end %}\
{% when len(indexes) > 0 %}\
  public ${prop.metadataStoreRetType} get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}{% if not prop.hasBaseAttribute %}${prop.name}{% end %}(${indexes_string(indexes)})
{% end %}\
{% otherwise %}\
  public ${prop.metadataStoreRetType} get{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}{% if not prop.hasBaseAttribute %}${prop.name}{% end %}()
{% end %}\
{% end %}\
  {
{% if debug %}\
    // MARKER [B-IMP]
    // Parents: ${repr(parents[obj.name])}
{% end debug %}\
{% choose %}\
{% when is_abstract(parent) and prop.isReference and prop.maxOccurs > 1 %}\
    // ${parent} is abstract proprietary, is reference and occurs more than once
    return ${join_accessors(obj.name, parent, prop)}.getLinked${prop.methodName}(${index_name_string(prop.name)}).getID();
{% end %}\
{% when is_abstract(parent) and prop.isReference %}\
    // ${parent} is abstract proprietary
    return ${join_accessors(obj.name, parent, prop)}.getLinked${prop.methodName}().getID();
{% end %}\
{% when is_abstract(parent) %}\
    // ${parent} is abstract proprietary and not a reference
    return ${join_accessors(obj.name, parent, prop)}.get${prop.methodName}();
{% end %}\
{% when prop.isReference and prop.maxOccurs > 1 %}\
    // ${prop.name} is reference and occurs more than once
    return ${join_accessors(obj.name, parent, prop)}.getLinked${prop.methodName}(${index_name_string(prop.name)}).getID();
{% end %}\
{% when prop.isReference %}\
    // ${prop.name} is reference and occurs only once
    return ${join_accessors(obj.name, parent, prop)}.getLinked${prop.methodName}().getID();
{% end %}\
{% otherwise %}\
    // ${prop.name} is not a reference
    return ${join_accessors(obj.name, parent, prop)}.get${prop.methodName}();
{% end %}\
{% end %}\
  }
{% end %}\
\
{% def setter(parent, obj, prop, indexes) %}\
{% choose %}\
{% when len(indexes) > 0 and prop.maxOccurs > 1 %}\
  public void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}{% if not prop.hasBaseAttribute %}${prop.name}{% end %}(${prop.metadataStoreArgType} ${prop.argumentName}, ${indexes_string(indexes)}, ${index_string(prop.name)})
{% end %}\
{% when len(indexes) > 0 %}\
  public void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}{% if not prop.hasBaseAttribute %}${prop.name}{% end %}(${prop.metadataStoreArgType} ${prop.argumentName}, ${indexes_string(indexes)})
{% end %}\
{% otherwise %}\
  public void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}{% if not prop.hasBaseAttribute %}${prop.name}{% end %}(${prop.metadataStoreArgType} ${prop.argumentName})
{% end %}\
{% end %}\
  {
{% if debug %}\
    // MARKER [C-IMP]
    // Parents: ${repr(parents[obj.name])}
{% end debug %}\
{% choose %}\
{% when is_abstract(parent) and prop.isReference %}\
    // ${prop.name} is abstract and is a reference
    ${prop.name} ${prop.instanceVariableName}_reference = new ${prop.name}();
    ${prop.instanceVariableName}_reference.setID(${prop.argumentName});
    model.addReference(
      root.${".".join(accessor(obj.name, parent, prop)[:-1])},
      ${prop.instanceVariableName}_reference);
    // ${parent} is abstract
{% end %}\
{% when is_abstract(parent) %}\
    // ${parent} is abstract and not a reference
    ODE o0 = root;
{% for i, v in enumerate(accessor(obj.name, parent, prop, accessor_string_complex)[:-1]) %}\
{% choose %}\
{% when v['level'] == 2 %}\
    if (o${i}.sizeOf${v['name']}List() == ${index_name_string(v['name'])})
    {
      o${i}.add${v['name']}(new ${obj.name}());
    }
{% end %}\
{% when v['max_occurs'] > 1 %}\
    if (o${i}.sizeOf${v['name']}List() == ${index_name_string(v['name'])})
    {
      o${i}.add${v['name']}(new ${v['name']}());
    }
{% end %}\
{% when v['max_occurs'] == 1 %}\
    if (o${i}.${v['accessor']} == null)
    {
      o${i}.set${v['name']}(new ${v['name']}());
    }
{% end %}\
{% end %}\
    ${v['name']} o${i + 1} = o${i}.${v['accessor']};
{% if v['level'] == 2 %}\
{% if "ID" == prop.name %}\
    model.addModelObject(${prop.argumentName}, o${i + 1});
{% end %}\
    ((${obj.name})o${i + 1}).set${prop.methodName}(${prop.argumentName});
{% end %}\
{% end %}\
{% end %}\
{% when prop.isReference %}\
    // ${prop.name} is reference and occurs more than once
    ${prop.name} ${prop.instanceVariableName}_reference = new ${prop.name}();
    ${prop.instanceVariableName}_reference.setID(${prop.argumentName});
    model.addReference(
      ${join_accessors(obj.name, parent, prop)},
      ${prop.instanceVariableName}_reference);
{% end %}\
{% otherwise %}\
    // ${prop.name} is not a reference
    ODE o0 = root;
{% for i, v in enumerate(accessor(obj.name, parent, prop, accessor_string_complex)) %}\
{% choose %}\
{% when v['max_occurs'] > 1 %}\
    if (o${i}.sizeOf${v['name']}List() == ${index_name_string(v['name'])})
    {
      o${i}.add${v['name']}(new ${v['concreteName']}());
    }
{% end %}\
{% when v['max_occurs'] == 1 %}\
    if (o${i}.${v['accessor']} == null)
    {
      o${i}.set${v['name']}(new ${v['concreteName']}());
    }
{% end %}\
{% end %}\
{% if not v['isAbstractSub'] %}\
    ${v['name']} o${i + 1} = o${i}.${v['accessor']};
{% end %}\
{% if v['isAbstractSub'] %}\
    ${v['concreteName']} o${i + 1} = (${v['concreteName']}) o${i}.${v['accessor']};
{% end %}\
{% if v['level'] == 1 %}\
{% if "ID" == prop.name %}\
    model.addModelObject(${prop.argumentName}, o${i + 1});
{% end %}\
    o${i + 1}.set${prop.methodName}(${prop.argumentName});
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% if obj.name in customContent and prop.name in customContent[obj.name] %}\
{% if debug %}\
    // Custom content from ${obj.name} ${prop.name} template
{% end debug %}\
${customContent[obj.name][prop.name]}
{% end %}\
  }
{% end %}\
\
{% python
  def is_abstract(name):
    o = model.getObjectByName(name)
    if o is not None and \
       (o.isAbstract):
      return True
    return False

  def sorted_properties(o):
    return sorted(list(o.properties.values()) + o.baseObjectProperties, key=lambda x: x.name)

  def join_accessors(name, parent, prop=None, accessorIndex=None, additionalJoins=None):
    results = dict()
    to_return = "root"
    o = model.getObjectByName(parent)
    results = accessor(name, parent, prop, accessor_string_complex)
    if accessorIndex is not None:
      results = results[:accessorIndex]
    for result in results:
      if result['isAbstractSub']:
        to_return = "".join(("((",result['concreteName'],")",to_return,".",result['accessor'],")"))
      else:
        to_return = ".".join((to_return, result['accessor']))
    if additionalJoins is not None:
      to_return = ".".join([to_return] + additionalJoins)
    return to_return

  def accessor_string(name, max_occurs, level, concreteName=None):
    """Makes a Java method accessor string from an index name."""
    return accessor_string_complex(name, max_occurs, level, concreteName)['accessor']

  def accessor_string_complex(name, max_occurs, level, concreteName=None):
    """Makes a Java method accessor string from an index name."""
    isAbstractSub = True
    if concreteName is None:
      concreteName = name
      isAbstractSub = False
    to_return = {'level': level, 'name': name, 'max_occurs': max_occurs, 'isAbstractSub': isAbstractSub, 'concreteName': concreteName}
    if max_occurs == 1:
      to_return['accessor'] = "get%s()" % (name)
      return to_return
    if name[:2].isupper():
      to_return['accessor'] = "get%s(%sIndex)" % (name, name)
      return to_return
    to_return['accessor'] = "get%s(%s%sIndex)" % (name, name[:1].lower(), name[1:])
    return to_return

  def accessor(name, parent, prop, func=accessor_string):
    results = dict()
    fu.resolve_hierarchy(results, model, {name: parents[name]}, func, min_occurs=1)
    if len(results.keys()) == 0:
      raise Exception("Zero KEYS No accessor for: name:%s parent:%s prop:%s === %s" % (name, parent, prop, results))
    if parent not in results.keys():
      raise Exception("Invalid KEY No accessor for: name:%s parent:%s prop:%s === %s" % (name, parent, prop.name, results))
    return results[parent]

  def basic_accessor(name):
    results = dict()
    o = model.getObjectByName(name)
    fu.resolve_hierarchy(results, model, {name: parents[name]}, accessor_string, min_occurs=1)
    if len(results.keys()) == 0:
      raise Exception("Zero KEYS No accessor for: name:%s parent:%s prop:%s === %s" % (name, list(parents[name].keys())[0], prop, results))
    if list(parents[name].keys())[0] not in results.keys():
      raise Exception("Invalid KEY No accessor for: name:%s parent:%s === %s" % (name, list(parents[name].keys())[0], results))
    return results[list(parents[name].keys())[0]]

%}\
\
\
/*
 * Bhojpur ODE-XML Java library for working with ODE-XML metadata structures.
 *
 * Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*-----------------------------------------------------------------------------
 *
 * THIS IS AUTOMATICALLY GENERATED CODE. DO NOT MODIFY.
 *
 *-----------------------------------------------------------------------------
 */

package ${lang.odexml_metadata_package};

import java.util.List;

import ${lang.odexml_model_package}.*;
import ${lang.odexml_model_enums_package}.*;
import ${lang.odexml_model_package}.primitives.*;

import ${lang.units_package}.quantity.Angle;
import ${lang.units_package}.quantity.ElectricPotential;
import ${lang.units_package}.quantity.Frequency;
import ${lang.units_package}.quantity.Length;
import ${lang.units_package}.quantity.Power;
import ${lang.units_package}.quantity.Pressure;
import ${lang.units_package}.quantity.Temperature;
import ${lang.units_package}.quantity.${lang.typeToUnitsType("UnitsTime")};
import ${lang.units_package}.unit.Unit;

/**
 * A metadata store implementation for constructing and manipulating ODE-XML
 * DOMs for the current version of ODE-XML.
 */
public class ODEXMLMetadataImpl extends AbstractODEXMLMetadata
{
  private ODEXMLMetadataRoot root; // Bhojpur ODE

  private ODEModel model;

  public ODEXMLMetadataImpl()
  {
    createRoot();
  }

  public void createRoot()
  {
    root = new ODEXMLMetadataRoot();
    model = new ODEModelImpl();
  }

  public MetadataRoot getRoot()
  {
    return root;
  }

  public void setRoot(MetadataRoot root)
  {
    if (root instanceof ODEXMLMetadataRoot)
      this.root = (ODEXMLMetadataRoot) root;
    else
      throw new IllegalArgumentException("Expecting ODEXMLMetadataRoot class or subclass.");
    model = new ODEModelImpl();
  }

  public String dumpXML()
  {
    resolveReferences();
    return super.dumpXML();
  }

  public int resolveReferences()
  {
    return model.resolveReferences();
  }

  // -- Entity counting (manual definitions) --

  public int getBooleanAnnotationAnnotationCount(int booleanAnnotationIndex) {
    return root.getStructuredAnnotations().getBooleanAnnotation(booleanAnnotationIndex).sizeOfLinkedAnnotationList();
  }

  public int getCommentAnnotationAnnotationCount(int commentAnnotationIndex) {
    return root.getStructuredAnnotations().getCommentAnnotation(commentAnnotationIndex).sizeOfLinkedAnnotationList();
  }

  public int getDoubleAnnotationAnnotationCount(int doubleAnnotationIndex) {
    return root.getStructuredAnnotations().getDoubleAnnotation(doubleAnnotationIndex).sizeOfLinkedAnnotationList();
  }

  public int getFileAnnotationAnnotationCount(int fileAnnotationIndex) {
    return root.getStructuredAnnotations().getFileAnnotation(fileAnnotationIndex).sizeOfLinkedAnnotationList();
  }

  public int getListAnnotationAnnotationCount(int listAnnotationIndex) {
    return root.getStructuredAnnotations().getListAnnotation(listAnnotationIndex).sizeOfLinkedAnnotationList();
  }

  public int getLongAnnotationAnnotationCount(int longAnnotationIndex) {
    return root.getStructuredAnnotations().getLongAnnotation(longAnnotationIndex).sizeOfLinkedAnnotationList();
  }

  public int getMapAnnotationAnnotationCount(int mapAnnotationIndex) {
    return root.getStructuredAnnotations().getMapAnnotation(mapAnnotationIndex).sizeOfLinkedAnnotationList();
  }

  public int getTagAnnotationAnnotationCount(int tagAnnotationIndex) {
    return root.getStructuredAnnotations().getTagAnnotation(tagAnnotationIndex).sizeOfLinkedAnnotationList();
  }

  public int getTermAnnotationAnnotationCount(int termAnnotationIndex) {
    return root.getStructuredAnnotations().getTermAnnotation(termAnnotationIndex).sizeOfLinkedAnnotationList();
  }

  public int getTimestampAnnotationAnnotationCount(int timestampAnnotationIndex)
  {
    return root.getStructuredAnnotations().getTimestampAnnotation(timestampAnnotationIndex).sizeOfLinkedAnnotationList();
  }

  public int getXMLAnnotationAnnotationCount(int xmlAnnotationIndex) {
    return root.getStructuredAnnotations().getXMLAnnotation(xmlAnnotationIndex).sizeOfLinkedAnnotationList();
  }

{% for abstractClass in model.opts.lang.getSubstitutionTypes() %}\
{% for k, v in indexes[abstractClass].items() %}\
  public String get${abstractClass}Type(${indexes_string(v)})
  {
    ${abstractClass} o = (${abstractClass}) root.${".".join(basic_accessor(abstractClass))};
    String className = o.getClass().getName();
    return className.substring(
      className.lastIndexOf('.') + 1, className.length());
  }
{% end %}\
{% end %}\

  // -- Entity counting (code generated definitions) --

{% for o in sorted(model.objects.values(), key=lambda x: x.name) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if o.langBaseType != 'Object' %}\
{% if debug %}\
  // Element's text data
  // ${repr(indexes[o.name])}
{% end debug %}\
  public void set${o.name}Value(${o.langBaseType} value, ${indexes_string(list(indexes[o.name].values())[0])})
  {
    ODE o0 = root;
    if (o0.sizeOfImageList() == imageIndex)
    {
      o0.addImage(new Image());
    }
    Image o1 = o0.getImage(imageIndex);
    if (o1.getPixels() == null)
    {
      o1.setPixels(new Pixels());
    }
    Pixels o2 = o1.getPixels();
    if (o2.sizeOfTiffDataList() == tiffDataIndex)
    {
      o2.addTiffData(new TiffData());
    }
    TiffData o3 = o2.getTiffData(tiffDataIndex);
    if (o3.getUUID() == null)
    {
      o3.setUUID(new UUID());
    }
    UUID o4 = o3.getUUID();
    o4.setValue(value);
  }

  public ${o.langBaseType} get${o.name}Value(${indexes_string(list(indexes[o.name].values())[0])})
  {
    return root.getImage(imageIndex).getPixels().getTiffData(tiffDataIndex).getUUID().getValue();
  }

{% end %}\
{% if (parents[o.name] is not None and not o.isAbstract) or o.isAbstractSubstitution %}\
  // ${o.name} entity counting
{% for k, v in indexes[o.name].items() %}\
{% if fu.max_occurs_under_parent(model, k, o.name) > 1 and (k not in fu.METADATA_COUNT_IGNORE or o.type not in fu.METADATA_COUNT_IGNORE[k]) %}\
${counter(k, o, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\

  // -- Entity retrieval (manual definitions) --

  /** Gets the UUID associated with this collection of metadata. */
  public String getUUID()
  {
    return root.getUUID();
  }

  /** Gets the Creator associated with this collection of metadata. */
  public String getCreator()
  {
    return root.getCreator();
  }

  /** Gets the Map value associated with this annotation */
  public List<MapPair> getMapAnnotationValue(int mapAnnotationIndex)
  {
    return root.getStructuredAnnotations().getMapAnnotation(mapAnnotationIndex).getValue();
  }

  /** Gets the Map value associated with this generic light source */
  public List<MapPair> getGenericExcitationSourceMap(int instrumentIndex, int lightSourceIndex)
  {
    GenericExcitationSource o = (GenericExcitationSource) root.getInstrument(instrumentIndex).getLightSource(lightSourceIndex);
    return o.getMap();
  }

  /** Gets the Map value associated with this imaging environment */
  public List<MapPair> getImagingEnvironmentMap(int imageIndex)
  {
    return root.getImage(imageIndex).getImagingEnvironment().getMap();
  }

  // -- Entity retrieval (code generated definitions) --

{% for o in sorted(model.objects.values(), key=lambda x: x.name) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if (parents[o.name] is not None and not o.isAbstract) or o.isConcreteSubstitution %}
  //
  // ${o.name} property storage
{% if debug %}\
  //
  // Indexes: ${repr(indexes[o.name])}
  // ${repr(parents[o.name])}
  // Is multi path? ${is_multi_path[o.name]}
{% end debug %}\

{% choose %}\
{% when o.isReference %}\
{% for prop in sorted(list(o.properties.values()) + o.baseObjectProperties, key=lambda x: x.name) %}\
  // ${prop.minOccurs}:${prop.maxOccurs}
  // Is multi path? ${is_multi_path[o.name]}
  // Ignoring ${prop.name} property of reference ${o.name}

{% end %}\
{% end %}\
{% otherwise %}\
\
{% for k, v in indexes[o.topLevelName].items() %}\
{% if is_abstract(k) %}\
{% for prop in sorted_properties(model.getObjectByName(k)) %}\
{% choose %}\
{% when not prop.isPrimitive and prop.isChoice %}\
{% if debug %}\
  // Ignoring ${prop.name} of parent abstract type
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for parent_k, parent_v in indexes[k].items() %}\
{% if not prop.isBackReference and not prop.isUnitsEnumeration %}\
  // ${prop.name} accessor from parent ${k}
${getter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
\
{% for prop in sorted(list(o.properties.values()) + o.baseObjectProperties, key=lambda x: x.name) %}\
{% choose %}\
{% when prop.isBackReference %}\
{% if debug %}\
  // Ignoring ${prop.name} back reference
{% end debug %}\
{% end %}\
{% when not prop.isReference and not prop.isAttribute and prop.isComplex() and (not prop.name in fu.COMPLEX_OVERRIDE) %}\
{% if debug %}\
  // Ignoring ${prop.name} element, complex property
{% end debug %}\
{% end %}\
{% when prop.isUnitsEnumeration %}\
{% if debug %}\
  // Ignoring ${prop.name} element, units enumeration
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for k, v in indexes[o.topLevelName].items() %}\
${getter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\

  // -- Entity storage (manual definitions) --

  /** Sets the UUID associated with this collection of metadata. */
  public void setUUID(String uuid)
  {
    root.setUUID(uuid);
  }

  /** Sets the Creator associated with this collection of metadata. */
  public void setCreator(String creator)
  {
    root.setCreator(creator);
  }

  /** Sets the Map value associated with this annotation */
  public void setMapAnnotationValue(List<MapPair> value, int mapAnnotationIndex)
  {
    ODE o0 = root;
    if (o0.getStructuredAnnotations() == null)
    {
      o0.setStructuredAnnotations(new StructuredAnnotations());
    }
    StructuredAnnotations o1 = o0.getStructuredAnnotations();
    if (o1.sizeOfMapAnnotationList() == mapAnnotationIndex)
    {
      o1.addMapAnnotation(new MapAnnotation());
    }
    MapAnnotation o2 = o1.getMapAnnotation(mapAnnotationIndex);
    o2.setValue(value);
  }

  /** Sets the Map value associated with this generic light source */
  public void setGenericExcitationSourceMap(List<MapPair> map, int instrumentIndex, int lightSourceIndex)
  {
    ODE o0 = root;
    if (o0.sizeOfInstrumentList() == instrumentIndex)
    {
      o0.addInstrument(new Instrument());
    }
    Instrument o1 = o0.getInstrument(instrumentIndex);
    if (o1.sizeOfLightSourceList() == lightSourceIndex)
    {
      o1.addLightSource(new GenericExcitationSource());
    }
    LightSource o2 = o1.getLightSource(lightSourceIndex);
    ((GenericExcitationSource)o2).setMap(map);
  }

  /** Sets the Map value associated with this imaging environment */
  public void setImagingEnvironmentMap(List<MapPair> map, int imageIndex)
  {
    ODE o0 = root;
    if (o0.sizeOfImageList() == imageIndex)
    {
      o0.addImage(new Image());
    }
    Image o1 = o0.getImage(imageIndex);
    if (o1.getImagingEnvironment() == null)
    {
      o1.setImagingEnvironment(new ImagingEnvironment());
    }
    ImagingEnvironment o2 = o1.getImagingEnvironment();
    o2.setMap(map);
  }

  // -- Entity storage (code generated definitions) --

{% for o in sorted(model.objects.values(), key=lambda x: x.name) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if (parents[o.name] is not None and not o.isAbstract) or o.isConcreteSubstitution %}
  //
  // ${o.name} property storage
{% if debug %}\
  //
  // ${repr(parents[o.name])}
  // Is multi path? ${is_multi_path[o.name]}
{% end debug %}\

{% choose %}\
{% when o.isReference %}\
{% for prop in sorted(list(o.properties.values()) + o.baseObjectProperties, key=lambda x: x.name) %}\
  // ${prop.minOccurs}:${prop.maxOccurs}
  // Is multi path? ${is_multi_path[o.name]}
  // Ignoring ${prop.name} property of reference ${o.name}

{% end %}\
{% end %}\
{% otherwise %}\
\
{% for k, v in indexes[o.topLevelName].items() %}\
{% if is_abstract(k) %}\
{% for prop in sorted_properties(model.getObjectByName(k)) %}\
{% choose %}\
{% when not prop.isPrimitive and prop.isChoice %}\
{% if debug %}\
  // Ignoring ${prop.name} of parent abstract type
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for parent_k, parent_v in indexes[k].items() %}\
{% if not prop.isBackReference and not prop.isUnitsEnumeration %}\
 // ${prop.name} accessor from parent ${k}
${setter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
\
{% for prop in sorted(list(o.properties.values()) + o.baseObjectProperties, key=lambda x: x.name) %}\
{% choose %}\
{% when prop.isBackReference %}\
{% if debug %}\
  // Ignoring ${prop.name} back reference
{% end debug %}\
{% end %}\
{% when not prop.isReference and not prop.isAttribute and prop.isComplex() and (not prop.name in fu.COMPLEX_OVERRIDE) %}\
{% if debug %}\
  // Ignoring ${prop.name} element, complex property
{% end debug %}\
{% end %}\
{% when prop.isUnitsEnumeration %}\
{% if debug %}\
  // Ignoring ${prop.name} element, units enumeration
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for k, v in indexes[o.topLevelName].items() %}\
${setter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
}