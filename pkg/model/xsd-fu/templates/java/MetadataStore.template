{% def indexes_string(indexes) %}${", ".join(map(lambda x: lang.index_string(x),indexes))}{% end %}\
\
{% def index_string(name) %}\
{% choose %}\
{% when name[:2].isupper()%}int ${name}Index{% end %}\
{% otherwise %}int ${name[:1].lower()}${name[1:]}Index{% end %}\
{% end %}\
{% end %}\
\
{% def setter(parent, obj, prop, indexes) %}\
{% choose %}\
{% when len(indexes) > 0 and prop.maxOccurs > 1 %}\
{% if debug %}\
  // MARKER [A-GET]
{% end debug %}\
  /**
   * Set the ${prop.name} property of ${o.name}.
   *
   * @param ${prop.argumentName} ${prop.name} to set.
{% for param in indexes %}\
   * @param ${param['argname']} the ${param['type']} index.
{% end for %}\
   * @param ${lang.index_signature(prop.name, 0, 0)['argname']} ${prop.name} index (unused).
   */
  void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}{% if not prop.hasBaseAttribute %}${prop.name}{% end %}(${prop.metadataStoreArgType} ${prop.argumentName}, ${indexes_string(indexes)}, ${index_string(prop.name)});\
{% end %}\
{% when len(indexes) > 0 %}\
{% if debug %}\
  // MARKER [B-GET]
{% end debug %}\
  /**
   * Set the ${prop.name} property of ${o.name}.
   *
   * @param ${prop.argumentName} ${prop.name} to set.
{% for param in indexes %}\
   * @param ${param['argname']} the ${param['type']} index.
{% end for %}\
   */
  void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}{% if not prop.hasBaseAttribute %}${prop.name}{% end %}(${prop.metadataStoreArgType} ${prop.argumentName}, ${indexes_string(indexes)});\
{% end %}\
{% otherwise %}\
{% if debug %}\
  // MARKER [C-GET]
{% end debug %}\
  /**
   * Set the ${prop.name} property of ${o.name}.
   *
   * @param ${prop.argumentName} ${prop.name} to set.
   */
  void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}{% if not prop.hasBaseAttribute %}${prop.name}{% end %}(${prop.metadataStoreArgType} ${prop.argumentName});\
{% end %}\
{% end %}\
{% end %}\
\
{% python
  def is_abstract(name):
          o = model.getObjectByName(name)
          if o is not None and \
                   (o.isAbstract):
                  return True
          return False

  def sorted_properties(o):
    return sorted(list(o.properties.values()) + o.baseObjectProperties, key=lambda x: x.name)
%}\
\
\
/*
 * Bhojpur ODE-XML Java library for working with ODE-XML metadata structures.
 *
 * Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*-----------------------------------------------------------------------------
 *
 * THIS IS AUTOMATICALLY GENERATED CODE. DO NOT MODIFY.
 *
 *-----------------------------------------------------------------------------
 */

package ${lang.metadata_package};

import java.util.List;

import ${lang.odexml_model_package}.*;
import ${lang.odexml_model_enums_package}.*;
import ${lang.odexml_model_package}.primitives.*;

import ${lang.units_package}.quantity.Angle;
import ${lang.units_package}.quantity.ElectricPotential;
import ${lang.units_package}.quantity.Frequency;
import ${lang.units_package}.quantity.Length;
import ${lang.units_package}.quantity.Power;
import ${lang.units_package}.quantity.Pressure;
import ${lang.units_package}.quantity.Temperature;
import ${lang.units_package}.quantity.${lang.typeToUnitsType("UnitsTime")};
import ${lang.units_package}.unit.Unit;

/**
 * A proxy whose responsibility it is to marshal biological image data into a
 * particular storage medium.
 *
 * <p>The <code>MetadataStore</code> interface encompasses the metadata that
 * any specific storage medium (file, relational database, etc.) should be
 * expected to store into its backing data model.
 *
 * <p>The <code>MetadataStore</code> interface goes hand in hand with the
 * <code>MetadataRetrieve</code> interface. Essentially,
 * <code>MetadataRetrieve</code> provides the "getter" methods for a storage
 * medium, and <code>MetadataStore</code> provides the "setter" methods.
 *
 * <p>Since it often makes sense for a storage medium to implement both
 * interfaces, there is also an {@link IMetadata} interface encompassing
 * both <code>MetadataStore</code> and <code>MetadataRetrieve</code>, which
 * reduces the need to cast between object types.
 *
 * <p>See {@link ${lang.odexml_metadata_package}.ODEXMLMetadata} for an example
 * implementation.
 *
 * <p><b>Important note:</b> It is strongly recommended that applications
 * (e.g., file format readers) using <code>MetadataStore</code> populate
 * information in a linear order. Specifically, iterating over entities
 * from "leftmost" index to "rightmost" index is required for certain
 * <code>MetadataStore</code> implementations such as Bhojpur ODE's
 * <code>ODEMetadataStore</code>. For example, when populating Image, Pixels
 * and Plane information, an outer loop should iterate across
 * <code>imageIndex</code>, an inner loop should iterate across
 * <code>pixelsIndex</code>, and an innermost loop should handle
 * <code>planeIndex</code>. For an illustration of the ideal traversal order,
 * see {@link ode.xml.meta.MetadataConverter#convertMetadata}.</p>
 */
public interface MetadataStore extends BaseMetadata
{
  /**
   * Create root node.  The action taken here is specific to the
   * concrete metadata implementation.
   */
  void createRoot();

  /**
   * Get the root node of the metadata.  Note that the root node
   * type will be specific to the concrete metadata
   * implementation.
   *
   * @return the root node.
   */
  MetadataRoot getRoot();

  /**
   * Set the root node of the metadata.  Note that the root node
   * type will be specific to the concrete metadata
   * implementation.  An exception will be thrown if the root
   * node is of an incompatible type.
   *
   * @param root the root node.
   */
  void setRoot(MetadataRoot root);

  // -- Entity storage (manual definitions) --

  /**
   * Set the values of a MapAnnotation.
   *
   * @param value the MapAnnotation values to set.
   * @param mapAnnotationIndex the MapAnnotation index.
   */
  void setMapAnnotationValue(List<MapPair> value, int mapAnnotationIndex);

  /**
   * Set the MapAnnotation values of a GenericExcitationSource.
   *
   * @param map the MapAnnotation values to set.
   * @param instrumentIndex the Instrument index.
   */
  void setGenericExcitationSourceMap(List<MapPair> map, int instrumentIndex, int lightSourceIndex);

  /**
   * Set the MapAnnotation values of an ImagingEnvironment.
   *
   * @param map the MapAnnotation values to set.
   * @param imageIndex the Image index.
   */
  void setImagingEnvironmentMap(List<MapPair> map, int imageIndex);

  // -- Entity storage (code generated definitions) --

  /**
   * Set the UUID associated with this collection of metadata.
   *
   * @param uuid the UUID to set.
   */
  void setUUID(String uuid);

  /**
   * Set the Creator associated with this collection of metadata.
   *
   * @param creator the Creator to set.
   */
  default void setCreator(String creator)
  {
  }

{% for o in sorted(model.objects.values(), key=lambda x: x.name) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if o.langBaseType != 'Object' %}\
{% if debug %}\
  // Element's text data
  // ${repr(indexes[o.name])}
{% end debug %}\
  /**
   * Set the text value of ${o.name}.
   *
   * @param value text value.
{% for param in list(indexes[o.name].values())[0] %}\
   * @param ${param['argname']} the ${param['type']} index.
{% end for %}\
   */
  void set${o.name}Value(${o.langBaseType} value, ${indexes_string(list(indexes[o.name].values())[0])});

{% end %}\
{% if (parents[o.name] is not None and not o.isAbstract) or o.isConcreteSubstitution %}\
{% if debug %}\
  // MARKER [EEE]
  //
  // ${o.name} property storage
  //
  // ${repr(parents[o.name])}
  // Is multi path? ${is_multi_path[o.name]}
{% end debug %}\

{% choose %}\
{% when o.isReference %}\
{% for prop in sorted(list(o.properties.values()) + o.baseObjectProperties, key=lambda x: x.name) %}\
{% if debug %}\
  // ${prop.minOccurs}:${prop.maxOccurs}
  // Is multi path? ${is_multi_path[o.name]}
  // Ignoring ${prop.name} property of reference ${o.name}

{% end debug %}\
{% end %}\
{% end %}\
{% otherwise %}\
\
{% for k, v in indexes[o.topLevelName].items() %}\
{% if is_abstract(k) %}\
{% for prop in sorted_properties(model.getObjectByName(k)) %}\
{% choose %}\
{% when not prop.isPrimitive and prop.isChoice %}\
{% if debug %}\
  // MARKER [CCC]
{% end debug %}\
{% if debug %}\
  // Ignoring ${prop.name} of parent abstract type
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for parent_k, parent_v in indexes[k].items() %}\
{% if debug %}\
  // MARKER [DDD]
{% end debug %}\
{% if not prop.isBackReference and not prop.isUnitsEnumeration %}\
{% if debug %}\
  // MARKER [AAA] - isUnitsEnumeration ${prop.isUnitsEnumeration}
{% end debug %}\
  // ${prop.name} accessor from parent ${k}
${setter(k, o, prop, v)}
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
\
{% for prop in sorted(list(o.properties.values()) + o.baseObjectProperties, key=lambda x: x.name) %}\
{% choose %}\
{% when prop.isBackReference %}\
{% if debug %}\
  // Ignoring ${prop.name} back reference
{% end debug %}\
{% end %}\
{% when not prop.isReference and not prop.isAttribute and prop.isComplex() and (not prop.name in fu.COMPLEX_OVERRIDE)%}\
{% if debug %}\
  // Ignoring ${prop.name} element, complex property
{% end debug %}\
{% end %}\
{% when prop.isUnitsEnumeration %}\
{% if debug %}\
  // MARKER [FFF]
{% end debug %}\
{% if debug %}\
  // Ignoring ${prop.name} element, unit enumeration property
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for k, v in indexes[o.topLevelName].items() %}\
{% if debug %}\
  // MARKER [BBB]
{% end debug %}\
${setter(k, o, prop, v)}

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
}