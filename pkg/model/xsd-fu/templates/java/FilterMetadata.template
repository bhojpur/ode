{% def indexes_string(indexes) %}${", ".join(map(lambda x: lang.index_string(x),indexes))}{% end %}\
\
{% def indexes_name_string(indexes) %}${", ".join(map(lambda x: lang.index_argname(x),indexes))}{% end %}\
\
{% def index_name_string(name) %}\
{% choose %}\
{% when name[:2].isupper()%}${name}Index{% end %}\
{% otherwise %}${name[:1].lower()}${name[1:]}Index{% end %}\
{% end %}\
{% end %}\
\
{% def index_string(name) %}int ${index_name_string(name)}{% end %}\
\
{% def setter(parent, obj, prop, indexes) %}\
{% choose %}\
{% when len(indexes) > 0 and prop.maxOccurs > 1 %}\
{% if debug %}\
  // MARKER [A-GET]
{% end debug %}\
  public void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}{% if not prop.hasBaseAttribute %}${prop.name}{% end %}(${prop.metadataStoreArgType} ${prop.argumentName}, ${indexes_string(indexes)}, ${index_string(prop.name)})
  {
{% if prop.langType == "String" %}\
    ${prop.argumentName} = filter? DataTools.sanitize(${prop.argumentName}) : ${prop.argumentName};
{% end %}\
    store.set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}{% if not prop.hasBaseAttribute %}${prop.name}{% end %}(${prop.argumentName}, ${indexes_name_string(indexes)}, ${index_name_string(prop.name)});
  }
{% end %}\
{% when len(indexes) > 0 %}\
{% if debug %}\
  // MARKER [B-GET]
{% end debug %}\
  public void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}{% if not prop.hasBaseAttribute %}${prop.name}{% end %}(${prop.metadataStoreArgType} ${prop.argumentName}, ${indexes_string(indexes)})
  {
{% if prop.langType == "String" %}\
    ${prop.argumentName} = filter? DataTools.sanitize(${prop.argumentName}) : ${prop.argumentName};
{% end %}\
    store.set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}{% if not prop.hasBaseAttribute %}${prop.name}{% end %}(${prop.argumentName}, ${indexes_name_string(indexes)});
  }
{% end %}\
{% otherwise %}\
{% if debug %}\
  // MARKER [C-GET]
{% end debug %}\
  public void set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}{% if not prop.hasBaseAttribute %}${prop.name}{% end %}(${prop.metadataStoreArgType} ${prop.argumentName})
  {
{% if prop.langType == "String" %}\
    ${prop.argumentName} = filter? DataTools.sanitize(${prop.argumentName}) : ${prop.argumentName};
{% end %}\
    store.set{% if is_multi_path[o.name] %}${parent}{% end %}${obj.name}{% if not prop.hasBaseAttribute %}${prop.name}{% end %}(${prop.argumentName});
  }
{% end %}\
{% end %}\
{% end %}\
\
{% python
  def is_abstract(name):
    o = model.getObjectByName(name)
    if o is not None and \
       (o.isAbstract):
      return True
    return False

  def sorted_properties(o):
    return sorted(list(o.properties.values()) + o.baseObjectProperties, key=lambda x: x.name)

  def accessor_string(name, max_occurs, level, concreteName=None):
    """Makes a Java method accessor string from an index name."""
    return accessor_string_complex(name, max_occurs, level, concreteName)['accessor']

  def accessor_string_complex(name, max_occurs, level, concreteName=None):
    """Makes a Java method accessor string from an index name."""
    if concreteName is None:
      concreteName = name
    to_return = {'level': level, 'name': concreteName, 'max_occurs': max_occurs}
    if max_occurs == 1:
      to_return['accessor'] = "get%s()" % (name)
      return to_return
    if name[:2].isupper():
      to_return['accessor'] = "get%s(%sIndex)" % (name, name)
      return to_return
    to_return['accessor'] = "get%s(%s%sIndex)" % (name, name[:1].lower(), name[1:])
    return to_return

  def accessor(name, parent, prop, func=accessor_string):
    results = dict()
    fu.resolve_hierarchy(results, model, {name: parents[name]}, func, min_occurs=1)
    if parent not in results.keys():
      raise Exception("Invalid KEY No accessor for: name:%s parent:%s prop:%s === %s" % (name, parent, prop, results))
    if len(results.keys()) == 0:
      raise Exception("Zero KEYS No accessor for: name:%s parent:%s prop:%s === %s" % (name, parent, prop, results))
    return results[parent]
%}\
\
\
/*
 * Bhojpur ODE-XML Java library for working with ODE-XML metadata structures.
 *
 * Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*-----------------------------------------------------------------------------
 *
 * THIS IS AUTOMATICALLY GENERATED CODE. DO NOT MODIFY.
 *
 *-----------------------------------------------------------------------------
 */

package ${lang.metadata_package};

import java.util.List;

import loci.common.DataTools;

import ${lang.odexml_model_package}.*;
import ${lang.odexml_model_enums_package}.*;
import ${lang.odexml_model_package}.primitives.*;

import ${lang.units_package}.quantity.Angle;
import ${lang.units_package}.quantity.ElectricPotential;
import ${lang.units_package}.quantity.Frequency;
import ${lang.units_package}.quantity.Length;
import ${lang.units_package}.quantity.Power;
import ${lang.units_package}.quantity.Pressure;
import ${lang.units_package}.quantity.Temperature;
import ${lang.units_package}.quantity.${lang.typeToUnitsType("UnitsTime")};
import ${lang.units_package}.unit.Unit;

/**
 * An implementation of {@link MetadataStore} that removes unprintable
 * characters from metadata values before storing them in a delegate
 * MetadataStore.
 */
public class FilterMetadata implements MetadataStore
{
  // -- Fields --

  /** The wrapped metadata store. */
  private MetadataStore store;
  /** Is filtering enabled? */
  private boolean filter;

  // -- Constructor --

  /**
   * Creates a new instance.
   * @param store the metadata store to wrap.
   * @param filter true to enable filtering, false to
   * disable.
   */
  public FilterMetadata(MetadataStore store, boolean filter)
  {
    this.store = store;
    this.filter = filter;
  }

  // -- MetadataStore API methods --

  /* @see MetadataStore#createRoot() */
  public void createRoot()
  {
    store.createRoot();
  }

  /* @see MetadataStore#getRoot() */
  public MetadataRoot getRoot()
  {
    return store.getRoot();
  }

  /* @see MetadataStore#setRoot(MetadataRoot) */
  public void setRoot(MetadataRoot root)
  {
    store.setRoot(root);
  }

  /* @see MetadataStore#setUUID(String) */
  public void setUUID(String uuid)
  {
    store.setUUID(uuid);
  }

  /* @see MetadataStore#setCreator(String) */
  public void setCreator(String creator)
  {
    store.setCreator(creator);
  }

  // -- AggregateMetadata API methods --

  // -- Entity storage (manual definitions) --

  /** Sets the Map value associated with this annotation */
  public void setMapAnnotationValue(List<MapPair> value, int mapAnnotationIndex)
  {
    store.setMapAnnotationValue(value, mapAnnotationIndex);
  }

  /** Sets the Map value associated with this generic light source */
  public void setGenericExcitationSourceMap(List<MapPair> map, int instrumentIndex, int lightSourceIndex)
  {
    store.setGenericExcitationSourceMap(map, instrumentIndex, lightSourceIndex);
  }

  /** Sets the Map value associated with this imaging environment */
  public void setImagingEnvironmentMap(List<MapPair> map, int imageIndex)
  {
    store.setImagingEnvironmentMap(map, imageIndex);
  }

  // -- Entity storage (code generated definitions) --

{% for o in sorted(model.objects.values(), key=lambda x: x.name) %}\
{% if o.name not in fu.METADATA_OBJECT_IGNORE %}\
{% if o.langBaseType != 'Object' %}\
{% if debug %}\
  // Element's text data
  // ${repr(indexes[o.name])}
{% end debug %}\
  public void set${o.name}Value(${o.langBaseType} value, ${indexes_string(list(indexes[o.name].values())[0])})
  {
{% if o.langBaseType == "String" %}\
    value = filter? DataTools.sanitize(value) : value;
{% end %}\
    store.set${o.name}Value(value, ${indexes_name_string(list(indexes[o.name].values())[0])});
  }

{% end %}\
{% if (parents[o.name] is not None and not o.isAbstract) or o.isConcreteSubstitution %}
{% if debug %}\
  // MARKER [EEE]
  //
  // ${o.name} property storage
  //
  // ${repr(parents[o.name])}
  // Is multi path? ${is_multi_path[o.name]}
{% end debug %}\

{% choose %}\
{% when o.isReference %}\
{% for prop in sorted(list(o.properties.values()) + o.baseObjectProperties, key=lambda x: x.name) %}\
{% if debug %}\
  // ${prop.minOccurs}:${prop.maxOccurs}
  // Is multi path? ${is_multi_path[o.name]}
  // Ignoring ${prop.name} property of reference ${o.name}

{% end debug %}\
{% end %}\
{% end %}\
{% otherwise %}\
\
{% for k, v in indexes[o.topLevelName].items() %}\
{% if is_abstract(k) %}\
{% for prop in sorted_properties(model.getObjectByName(k)) %}\
{% choose %}\
{% when not prop.isPrimitive and prop.isChoice %}\
{% if debug %}\
  // MARKER [CCC]
{% end debug %}\
{% if debug %}\
  // Ignoring ${prop.name} of parent abstract type
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for parent_k, parent_v in indexes[k].items() %}\
{% if debug %}\
  // MARKER [DDD]
{% end debug %}\
{% if not prop.isBackReference and not prop.isUnitsEnumeration %}\
{% if debug %}\
  // MARKER [AAA] - isUnitsEnumeration ${prop.isUnitsEnumeration}
{% end debug %}\
  // ${prop.name} accessor from parent ${k}
${setter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
\
{% for prop in sorted(list(o.properties.values()) + o.baseObjectProperties, key=lambda x: x.name) %}\
{% choose %}\
{% when prop.isBackReference %}\
{% if debug %}\
  // Ignoring ${prop.name} back reference
{% end debug %}\
{% end %}\
{% when not prop.isReference and not prop.isAttribute and prop.isComplex() and (not prop.name in fu.COMPLEX_OVERRIDE) %}\
{% if debug %}\
  // Ignoring ${prop.name} element, complex property
{% end debug %}\
{% end %}\
{% when prop.isUnitsEnumeration %}\
{% if debug %}\
  // MARKER [FFF]
{% end debug %}\
{% if debug %}\
  // Ignoring ${prop.name} element, unit enumeration property
{% end debug %}\
{% end %}\
{% otherwise %}\
{% for k, v in indexes[o.topLevelName].items() %}\
{% if debug %}\
  // MARKER [BBB]
{% end debug %}\
${setter(k, o, prop, v)}\

{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
{% end %}\
}