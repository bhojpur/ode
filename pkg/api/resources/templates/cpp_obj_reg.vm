#*
 *   $Id$
 *
 * Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *#
/*
 *   $$Id$$
 */

// ObjectFactory registrar generated by pkg/api/resources/templates/cpp_objs_reg.vm

\#include <ode/ObjectFactoryRegistrar.h>
\#include <ode/model/ElectricPotentialI.h>
\#include <ode/model/FrequencyI.h>
\#include <ode/model/LengthI.h>
\#include <ode/model/PressureI.h>
\#include <ode/model/PowerI.h>
\#include <ode/model/LengthI.h>
\#include <ode/model/LengthI.h>
\#include <ode/model/TemperatureI.h>
\#include <ode/model/ObjectFactory.h>
\#include <ode/model/TimeI.h>
#foreach($type in $types)
#if(!$type.abstract)
\#include <ode/model/${type.shortname}I.h>
#end
#end

namespace ode {
  namespace model {

#foreach($type in $types)
#if(!$type.abstract)
#set( $ObjFac = "${type.shortname}ObjectFactory" )
    class ${ObjFac} : virtual public Ice::ObjectFactory {

        public:
        ${ObjFac}() : Ice::ObjectFactory() { }

        ~${ObjFac}() {}

        Ice::ObjectPtr create(const std::string& /*type*/) {
            return new ode::model::${type.shortname}I();
        }

        void destroy() {}

    };
#end
#end

    class PermissionsObjectFactory : virtual public Ice::ObjectFactory {

        public:
        PermissionsObjectFactory() : Ice::ObjectFactory() { }

        ~PermissionsObjectFactory() {}

        Ice::ObjectPtr create(const std::string& /*type*/) {
            return new ode::model::PermissionsI();
        }

        void destroy() {}

    };

    class ElectricPotentialObjectFactory : virtual public Ice::ObjectFactory {

        public:
        ElectricPotentialObjectFactory() : Ice::ObjectFactory() { }

        ~ElectricPotentialObjectFactory() {}

        Ice::ObjectPtr create(const std::string& /*type*/) {
            return new ode::model::ElectricPotentialI();
        }

        void destroy() {}

    };

    class FrequencyObjectFactory : virtual public Ice::ObjectFactory {

        public:
        FrequencyObjectFactory() : Ice::ObjectFactory() { }

        ~FrequencyObjectFactory() {}

        Ice::ObjectPtr create(const std::string& /*type*/) {
            return new ode::model::FrequencyI();
        }

        void destroy() {}

    };

    class LengthObjectFactory : virtual public Ice::ObjectFactory {

        public:
        LengthObjectFactory() : Ice::ObjectFactory() { }

        ~LengthObjectFactory() {}

        Ice::ObjectPtr create(const std::string& /*type*/) {
            return new ode::model::LengthI();
        }

        void destroy() {}

    };

    class PowerObjectFactory : virtual public Ice::ObjectFactory {

        public:
        PowerObjectFactory() : Ice::ObjectFactory() { }

        ~PowerObjectFactory() {}

        Ice::ObjectPtr create(const std::string& /*type*/) {
            return new ode::model::PowerI();
        }

        void destroy() {}

    };

    class PressureObjectFactory : virtual public Ice::ObjectFactory {

        public:
        PressureObjectFactory() : Ice::ObjectFactory() { }

        ~PressureObjectFactory() {}

        Ice::ObjectPtr create(const std::string& /*type*/) {
            return new ode::model::PressureI();
        }

        void destroy() {}

    };

    class TemperatureObjectFactory : virtual public Ice::ObjectFactory {

        public:
        TemperatureObjectFactory() : Ice::ObjectFactory() { }

        ~TemperatureObjectFactory() {}

        Ice::ObjectPtr create(const std::string& /*type*/) {
            return new ode::model::TemperatureI();
        }

        void destroy() {}

    };

    class TimeObjectFactory : virtual public Ice::ObjectFactory {

        public:
        TimeObjectFactory() : Ice::ObjectFactory() { }

        ~TimeObjectFactory() {}

        Ice::ObjectPtr create(const std::string& /*type*/) {
            return new ode::model::TimeI();
        }

        void destroy() {}

    };

  void conditionalAdd(const std::string& name, const Ice::CommunicatorPtr& ic, const Ice::ObjectFactoryPtr& of) {

    if (0==ic->findObjectFactory(name)) {
      ic->addObjectFactory(of, name);
    }

  }

  void registerObjectFactory(const Ice::CommunicatorPtr& ic) {
    conditionalAdd("::ode::model::Permissions", ic, new PermissionsObjectFactory());
    conditionalAdd("::ode::model::ElectricPotential", ic, new ElectricPotentialObjectFactory());
    conditionalAdd("::ode::model::Frequency", ic, new FrequencyObjectFactory());
    conditionalAdd("::ode::model::Length", ic, new LengthObjectFactory());
    conditionalAdd("::ode::model::Power", ic, new PowerObjectFactory());
    conditionalAdd("::ode::model::Pressure", ic, new PressureObjectFactory());
    conditionalAdd("::ode::model::Temperature", ic, new TemperatureObjectFactory());
    conditionalAdd("::ode::model::Time", ic, new TimeObjectFactory());
#foreach($type in $types)
#if(!$type.abstract)
    conditionalAdd("::ode::model::${type.shortname}", ic,  new ${type.shortname}ObjectFactory());
#end
#end
  }

    } // End model
} // End ode
#stop