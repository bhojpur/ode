// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OdeServiceClient is the client API for OdeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OdeServiceClient interface {
	// StartLocalAnalysis starts an Image Analysis on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the ode/config.yaml
	//   3. all bytes constituting the Image Analysis YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalAnalysis(ctx context.Context, opts ...grpc.CallOption) (OdeService_StartLocalAnalysisClient, error)
	// StartFromPreviousAnalysis starts a new Image Analysis based on a previous one.
	// If the previous Image Analysis does not have the can-replay condition set this call will result in an error.
	StartFromPreviousAnalysis(ctx context.Context, in *StartFromPreviousAnalysisRequest, opts ...grpc.CallOption) (*StartAnalysisResponse, error)
	// StartAnalysisRequest starts a new Image Analysis based on its specification.
	StartAnalysis(ctx context.Context, in *StartAnalysisRequest, opts ...grpc.CallOption) (*StartAnalysisResponse, error)
	// Searches for Image Analysis known to this instance
	ListAnalysis(ctx context.Context, in *ListAnalysisRequest, opts ...grpc.CallOption) (*ListAnalysisResponse, error)
	// Subscribe listens to new Image Analysis updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (OdeService_SubscribeClient, error)
	// GetAnalysis retrieves details of a single Analysis
	GetAnalysis(ctx context.Context, in *GetAnalysisRequest, opts ...grpc.CallOption) (*GetAnalysisResponse, error)
	// Listen listens to Image Analysis updates and log output of a running Image Analysis
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (OdeService_ListenClient, error)
	// StopAnalysis stops a currently running Image Analysis
	StopAnalysis(ctx context.Context, in *StopAnalysisRequest, opts ...grpc.CallOption) (*StopAnalysisResponse, error)
}

type odeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOdeServiceClient(cc grpc.ClientConnInterface) OdeServiceClient {
	return &odeServiceClient{cc}
}

func (c *odeServiceClient) StartLocalAnalysis(ctx context.Context, opts ...grpc.CallOption) (OdeService_StartLocalAnalysisClient, error) {
	stream, err := c.cc.NewStream(ctx, &OdeService_ServiceDesc.Streams[0], "/v1.OdeService/StartLocalAnalysis", opts...)
	if err != nil {
		return nil, err
	}
	x := &odeServiceStartLocalAnalysisClient{stream}
	return x, nil
}

type OdeService_StartLocalAnalysisClient interface {
	Send(*StartLocalAnalysisRequest) error
	CloseAndRecv() (*StartAnalysisResponse, error)
	grpc.ClientStream
}

type odeServiceStartLocalAnalysisClient struct {
	grpc.ClientStream
}

func (x *odeServiceStartLocalAnalysisClient) Send(m *StartLocalAnalysisRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *odeServiceStartLocalAnalysisClient) CloseAndRecv() (*StartAnalysisResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartAnalysisResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *odeServiceClient) StartFromPreviousAnalysis(ctx context.Context, in *StartFromPreviousAnalysisRequest, opts ...grpc.CallOption) (*StartAnalysisResponse, error) {
	out := new(StartAnalysisResponse)
	err := c.cc.Invoke(ctx, "/v1.OdeService/StartFromPreviousAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odeServiceClient) StartAnalysis(ctx context.Context, in *StartAnalysisRequest, opts ...grpc.CallOption) (*StartAnalysisResponse, error) {
	out := new(StartAnalysisResponse)
	err := c.cc.Invoke(ctx, "/v1.OdeService/StartAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odeServiceClient) ListAnalysis(ctx context.Context, in *ListAnalysisRequest, opts ...grpc.CallOption) (*ListAnalysisResponse, error) {
	out := new(ListAnalysisResponse)
	err := c.cc.Invoke(ctx, "/v1.OdeService/ListAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odeServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (OdeService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &OdeService_ServiceDesc.Streams[1], "/v1.OdeService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &odeServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OdeService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type odeServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *odeServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *odeServiceClient) GetAnalysis(ctx context.Context, in *GetAnalysisRequest, opts ...grpc.CallOption) (*GetAnalysisResponse, error) {
	out := new(GetAnalysisResponse)
	err := c.cc.Invoke(ctx, "/v1.OdeService/GetAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odeServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (OdeService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &OdeService_ServiceDesc.Streams[2], "/v1.OdeService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &odeServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OdeService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type odeServiceListenClient struct {
	grpc.ClientStream
}

func (x *odeServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *odeServiceClient) StopAnalysis(ctx context.Context, in *StopAnalysisRequest, opts ...grpc.CallOption) (*StopAnalysisResponse, error) {
	out := new(StopAnalysisResponse)
	err := c.cc.Invoke(ctx, "/v1.OdeService/StopAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OdeServiceServer is the server API for OdeService service.
// All implementations must embed UnimplementedOdeServiceServer
// for forward compatibility
type OdeServiceServer interface {
	// StartLocalAnalysis starts an Image Analysis on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the ode/config.yaml
	//   3. all bytes constituting the Image Analysis YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalAnalysis(OdeService_StartLocalAnalysisServer) error
	// StartFromPreviousAnalysis starts a new Image Analysis based on a previous one.
	// If the previous Image Analysis does not have the can-replay condition set this call will result in an error.
	StartFromPreviousAnalysis(context.Context, *StartFromPreviousAnalysisRequest) (*StartAnalysisResponse, error)
	// StartAnalysisRequest starts a new Image Analysis based on its specification.
	StartAnalysis(context.Context, *StartAnalysisRequest) (*StartAnalysisResponse, error)
	// Searches for Image Analysis known to this instance
	ListAnalysis(context.Context, *ListAnalysisRequest) (*ListAnalysisResponse, error)
	// Subscribe listens to new Image Analysis updates
	Subscribe(*SubscribeRequest, OdeService_SubscribeServer) error
	// GetAnalysis retrieves details of a single Analysis
	GetAnalysis(context.Context, *GetAnalysisRequest) (*GetAnalysisResponse, error)
	// Listen listens to Image Analysis updates and log output of a running Image Analysis
	Listen(*ListenRequest, OdeService_ListenServer) error
	// StopAnalysis stops a currently running Image Analysis
	StopAnalysis(context.Context, *StopAnalysisRequest) (*StopAnalysisResponse, error)
	mustEmbedUnimplementedOdeServiceServer()
}

// UnimplementedOdeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOdeServiceServer struct {
}

func (UnimplementedOdeServiceServer) StartLocalAnalysis(OdeService_StartLocalAnalysisServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalAnalysis not implemented")
}
func (UnimplementedOdeServiceServer) StartFromPreviousAnalysis(context.Context, *StartFromPreviousAnalysisRequest) (*StartAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousAnalysis not implemented")
}
func (UnimplementedOdeServiceServer) StartAnalysis(context.Context, *StartAnalysisRequest) (*StartAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAnalysis not implemented")
}
func (UnimplementedOdeServiceServer) ListAnalysis(context.Context, *ListAnalysisRequest) (*ListAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAnalysis not implemented")
}
func (UnimplementedOdeServiceServer) Subscribe(*SubscribeRequest, OdeService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedOdeServiceServer) GetAnalysis(context.Context, *GetAnalysisRequest) (*GetAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalysis not implemented")
}
func (UnimplementedOdeServiceServer) Listen(*ListenRequest, OdeService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedOdeServiceServer) StopAnalysis(context.Context, *StopAnalysisRequest) (*StopAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAnalysis not implemented")
}
func (UnimplementedOdeServiceServer) mustEmbedUnimplementedOdeServiceServer() {}

// UnsafeOdeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OdeServiceServer will
// result in compilation errors.
type UnsafeOdeServiceServer interface {
	mustEmbedUnimplementedOdeServiceServer()
}

func RegisterOdeServiceServer(s grpc.ServiceRegistrar, srv OdeServiceServer) {
	s.RegisterService(&OdeService_ServiceDesc, srv)
}

func _OdeService_StartLocalAnalysis_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OdeServiceServer).StartLocalAnalysis(&odeServiceStartLocalAnalysisServer{stream})
}

type OdeService_StartLocalAnalysisServer interface {
	SendAndClose(*StartAnalysisResponse) error
	Recv() (*StartLocalAnalysisRequest, error)
	grpc.ServerStream
}

type odeServiceStartLocalAnalysisServer struct {
	grpc.ServerStream
}

func (x *odeServiceStartLocalAnalysisServer) SendAndClose(m *StartAnalysisResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *odeServiceStartLocalAnalysisServer) Recv() (*StartLocalAnalysisRequest, error) {
	m := new(StartLocalAnalysisRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OdeService_StartFromPreviousAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdeServiceServer).StartFromPreviousAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OdeService/StartFromPreviousAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdeServiceServer).StartFromPreviousAnalysis(ctx, req.(*StartFromPreviousAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdeService_StartAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdeServiceServer).StartAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OdeService/StartAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdeServiceServer).StartAnalysis(ctx, req.(*StartAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdeService_ListAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdeServiceServer).ListAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OdeService/ListAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdeServiceServer).ListAnalysis(ctx, req.(*ListAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdeService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OdeServiceServer).Subscribe(m, &odeServiceSubscribeServer{stream})
}

type OdeService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type odeServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *odeServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OdeService_GetAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdeServiceServer).GetAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OdeService/GetAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdeServiceServer).GetAnalysis(ctx, req.(*GetAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdeService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OdeServiceServer).Listen(m, &odeServiceListenServer{stream})
}

type OdeService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type odeServiceListenServer struct {
	grpc.ServerStream
}

func (x *odeServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OdeService_StopAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdeServiceServer).StopAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OdeService/StopAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdeServiceServer).StopAnalysis(ctx, req.(*StopAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OdeService_ServiceDesc is the grpc.ServiceDesc for OdeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OdeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.OdeService",
	HandlerType: (*OdeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousAnalysis",
			Handler:    _OdeService_StartFromPreviousAnalysis_Handler,
		},
		{
			MethodName: "StartAnalysis",
			Handler:    _OdeService_StartAnalysis_Handler,
		},
		{
			MethodName: "ListAnalysis",
			Handler:    _OdeService_ListAnalysis_Handler,
		},
		{
			MethodName: "GetAnalysis",
			Handler:    _OdeService_GetAnalysis_Handler,
		},
		{
			MethodName: "StopAnalysis",
			Handler:    _OdeService_StopAnalysis_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalAnalysis",
			Handler:       _OdeService_StartLocalAnalysis_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _OdeService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _OdeService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ode.proto",
}
