package ode.services.server.test.utests;

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import ode.services.server.util.ChecksumAlgorithmMapper;
import ode.util.checksum.ChecksumProvider;
import ode.util.checksum.ChecksumProviderFactory;
import ode.util.checksum.ChecksumProviderFactoryImpl;
import ode.util.checksum.ChecksumType;
import ode.model.ChecksumAlgorithm;

import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

/**
 * Test that the text of the {@link ChecksumAlgorithm} enumeration values correctly
 * indicates the bit width of hash codes from the corresponding checksum algorithm.
 */
public class ChecksumBitwidthTest {
    private ChecksumProviderFactory checksumProviderFactory;

    @BeforeMethod
    public void setupChecksumProviderFactory() {
        checksumProviderFactory = new ChecksumProviderFactoryImpl();
    }

    /**
     * Test that the bit width suffixing the checksum algorithm name matches
     * the size of the checksums actually generated by the corresponding algorithm.
     */
    @Test
    public void testBitWidthsSame() {
        for (final ChecksumAlgorithm algorithm : ChecksumAlgorithmMapper.getAllChecksumAlgorithms()) {
            final String algorithmName = algorithm.getValue().getValue();
            final int expectedBitWidth = Integer.parseInt(algorithmName.substring(algorithmName.lastIndexOf('-') + 1));

            final ChecksumType checksumType = ChecksumAlgorithmMapper.getChecksumType(algorithm);
            final ChecksumProvider checksumProvider = checksumProviderFactory.getProvider(checksumType);
            final int actualBitWidth = checksumProvider.checksumAsBytes().length << 3;

            Assert.assertEquals(actualBitWidth, expectedBitWidth, 
                    "bit width of checksum should match that suggested by checksum name " + algorithmName);
        }
    }

    @AfterMethod
    public void teardownChecksumProviderFactory() {
        checksumProviderFactory = null;
    }
}