<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

  <bean id="processContainer" class="ode.services.server.repo.ProcessContainer">
  </bean>

  <bean id="legacyRepository" class="ode.services.server.repo.LegacyRepositoryI" destroy-method="close">
      <constructor-arg ref="ServerAdapter"/>
      <constructor-arg ref="Registry"/>
      <constructor-arg ref="executor"/>
      <constructor-arg ref="repoPrincipal"/>
      <constructor-arg value="${ode.data.dir}"/>
      <constructor-arg ref="readOnlyStatus"/>
      <constructor-arg>
          <bean class="ode.services.server.repo.PublicRepositoryI">
              <constructor-arg ref="repositoryDao"/>
              <constructor-arg ref="checksumProviderFactory"/>
              <constructor-arg value="${ode.checksum.supported}"/>
              <constructor-arg value="${ode.fs.repo.path_rules}"/>
          </bean>
      </constructor-arg>
  </bean>
  <bean id="legacyRepositoryTakeoverRun" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    <property name="targetObject" ref="legacyRepository" />
    <property name="targetMethod" value="takeover" />
    <property name="concurrent"   value="false"/>
  </bean>
  <bean id="legacyRepositoryTakeoverTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
    <description>
    Runs periodically to give repositories a chance to take over for any dead
    instance. Calling takeover during regular initialization would cause startup
    to block. This is okay for separate repository (non-LegacyRepository) instances
    which run standalone, but not for this bean.
    </description>
    <property name="jobDetail" ref="legacyRepositoryTakeoverRun" />
    <property name="repeatInterval" value="60000" /><!-- millis -->
  </bean>

  <bean id="managedRepositoryServant" class="ode.services.server.repo.ManagedRepositoryI">
      <constructor-arg value="${ode.fs.repo.path}"/>
      <constructor-arg ref="repositoryDao"/>
      <constructor-arg ref="processContainer"/>
      <constructor-arg ref="securitySystem"/>
      <constructor-arg ref="checksumProviderFactory"/>
      <constructor-arg value="${ode.checksum.supported}"/>
      <constructor-arg value="${ode.fs.repo.path_rules}"/>
      <constructor-arg ref="uuid"/>
      <constructor-arg ref="roles"/>
      <constructor-arg ref="managedRepoUuids"/>
  </bean>
  <bean id="managedRepository" class="ode.services.server.repo.LegacyRepositoryI" destroy-method="close">
      <constructor-arg ref="ServerAdapter"/>
      <constructor-arg ref="Registry"/>
      <constructor-arg ref="executor"/>
      <constructor-arg ref="repoPrincipal"/>
      <constructor-arg value="${ode.managed.dir}"/>
      <constructor-arg ref="readOnlyStatus"/>
      <constructor-arg ref="managedRepositoryServant">
      </constructor-arg>
  </bean>
  <bean id="managedRepositoryTakeoverRun" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    <property name="targetObject" ref="managedRepository" />
    <property name="targetMethod" value="takeover" />
    <property name="concurrent"   value="false"/>
  </bean>
  <bean id="managedRepositoryTakeoverTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
    <description>
    Runs periodically to give repositories a chance to take over for any dead
    instance. Calling takeover during regular initialization would cause startup
    to block. This is okay for separate repository (non-LegacyRepository) instances
    which run standalone, but not for this bean.
    </description>
    <property name="jobDetail" ref="managedRepositoryTakeoverRun" />
    <property name="repeatInterval" value="60000" /><!-- millis -->
  </bean>

  <bean id="scriptRepository" class="ode.services.server.repo.ScriptRepositoryI" destroy-method="close">
      <description>
        Script repository which makes the contents of lib/scripts available
        for processing.
      </description>
      <constructor-arg ref="ServerAdapter"/>
      <constructor-arg ref="Registry"/>
      <constructor-arg ref="executor"/>
      <constructor-arg ref="repoPrincipal"/>
      <constructor-arg ref="scriptRepoHelper"/>
      <constructor-arg ref="readOnlyStatus"/>
      <constructor-arg>
          <bean class="ode.services.server.repo.PublicRepositoryI">
              <constructor-arg ref="repositoryDao"/>
              <constructor-arg ref="checksumProviderFactory"/>
              <constructor-arg value="${ode.checksum.supported}"/>
              <constructor-arg value="${ode.fs.repo.path_rules}"/>
          </bean>
      </constructor-arg>
      <constructor-arg ref="scriptRepoUuids"/>
  </bean>
  <bean id="scriptTakeoverRun" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    <property name="targetObject" ref="scriptRepository" />
    <property name="targetMethod" value="takeover" />
    <property name="concurrent"   value="false"/>
  </bean>
  <bean id="scriptTakeoverTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
    <property name="jobDetail" ref="scriptTakeoverRun" />
    <property name="repeatInterval" value="60000" />
  </bean>

  <!-- Params caching logic, see trac:10661 -->

  <bean id="paramsCache" class="ode.services.server.util.ParamsCache" lazy-init="false">
      <constructor-arg ref="Registry"/>
      <constructor-arg ref="roles"/>
      <constructor-arg ref="scriptRepoHelper"/>
      <constructor-arg value="${ode.scripts.cache.spec}"/>
  </bean>
  <bean id="paramsCacheRun" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    <property name="targetObject" ref="paramsCache" />
    <property name="targetMethod" value="lookupAll" />
  </bean>
  <bean id="paramsCacheTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
    <property name="cronExpression" value="${ode.scripts.cache.cron}"/>
    <property name="jobDetail" ref="paramsCacheRun"/>
  </bean>
  <bean id="paramsCacheTriggerGuard" class="ode.services.util.BeanInstantiationGuard">
    <constructor-arg ref="readOnlyStatus"/>
    <constructor-arg value="paramsCacheTrigger"/>
    <property name="isWriteDb" value="true"/>
    <property name="isWriteRepo" value="true"/>
  </bean>
  <bean id="paramsCacheStartupRun" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    <property name="targetObject" ref="paramsCache" />
    <property name="targetMethod" value="lookupAll" />
  </bean>
  <bean id="paramsCacheStartupTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
    <property name="startDelay" value="15000"/>
    <property name="repeatCount" value="0"/>
    <property name="repeatInterval" value="86400000"/><!-- 1 day just in case -->
    <property name="jobDetail" ref="paramsCacheStartupRun"/>
  </bean>
  <bean id="paramsCacheStartupTriggerGuard" class="ode.services.util.BeanInstantiationGuard">
    <constructor-arg ref="readOnlyStatus"/>
    <constructor-arg value="paramsCacheStartupTrigger"/>
    <property name="isWriteDb" value="true"/>
    <property name="isWriteRepo" value="true"/>
  </bean>

</beans>