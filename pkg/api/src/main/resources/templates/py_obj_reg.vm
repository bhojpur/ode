#*
 * Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *#
#
# Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

## ObjectFactory registrar generated by pkg/api/resources/templates/py_objs_reg.vm

import Ice

#foreach($type in $types)
#if(!$type.abstract)
#set( $ObjFac = "${type.shortname}ObjectFactory" )
class ${ObjFac}(Ice.ObjectFactory):

    from ode_model_${type.shortname}I import ${type.shortname}I

    def create(self, type):
        return self.${type.shortname}I()

    def destroy(self):
        pass

#end
#end
class PermissionsObjectFactory(Ice.ObjectFactory):

    from ode_model_PermissionsI import PermissionsI

    def create(self, type):
        return self.PermissionsI()

    def destroy(self):
        pass

class DetailsObjectFactory(Ice.ObjectFactory):

    from ode_model_DetailsI import DetailsI

    def __init__(self, client = None):
        self.client = client

    def create(self, type):
        return self.DetailsI(self.client)

    def destroy(self):
        pass

class ElectricPotentialObjectFactory(Ice.ObjectFactory):

    from ode_model_ElectricPotentialI import ElectricPotentialI

    def __init__(self, client = None):
        self.client = client

    def create(self, type):
        return self.ElectricPotentialI()

    def destroy(self):
        pass

class FrequencyObjectFactory(Ice.ObjectFactory):

    from ode_model_FrequencyI import FrequencyI

    def __init__(self, client = None):
        self.client = client

    def create(self, type):
        return self.FrequencyI()

    def destroy(self):
        pass

class LengthObjectFactory(Ice.ObjectFactory):

    from ode_model_LengthI import LengthI

    def __init__(self, client = None):
        self.client = client

    def create(self, type):
        return self.LengthI()

    def destroy(self):
        pass

class PowerObjectFactory(Ice.ObjectFactory):

    from ode_model_PowerI import PowerI

    def __init__(self, client = None):
        self.client = client

    def create(self, type):
        return self.PowerI()

    def destroy(self):
        pass

class PressureObjectFactory(Ice.ObjectFactory):

    from ode_model_PressureI import PressureI

    def __init__(self, client = None):
        self.client = client

    def create(self, type):
        return self.PressureI()

    def destroy(self):
        pass

class TemperatureObjectFactory(Ice.ObjectFactory):

    from ode_model_TemperatureI import TemperatureI

    def __init__(self, client = None):
        self.client = client

    def create(self, type):
        return self.TemperatureI()

    def destroy(self):
        pass

class TimeObjectFactory(Ice.ObjectFactory):

    from ode_model_TimeI import TimeI

    def __init__(self, client = None):
        self.client = client

    def create(self, type):
        return self.TimeI()

    def destroy(self):
        pass

def conditionalAdd(name, ic, of):
    if not ic.findObjectFactory(name):
        ic.addObjectFactory(of, name)

def registerObjectFactory(ic, client = None):
    conditionalAdd("::ode::model::Permissions", ic, PermissionsObjectFactory())
    conditionalAdd("::ode::model::Details", ic, DetailsObjectFactory(client))
    conditionalAdd("::ode::model::ElectricPotential", ic, ElectricPotentialObjectFactory(client))
    conditionalAdd("::ode::model::Frequency", ic, FrequencyObjectFactory(client))
    conditionalAdd("::ode::model::Length", ic, LengthObjectFactory(client))
    conditionalAdd("::ode::model::Power", ic, PowerObjectFactory(client))
    conditionalAdd("::ode::model::Pressure", ic, PressureObjectFactory(client))
    conditionalAdd("::ode::model::Temperature", ic, TemperatureObjectFactory(client))
    conditionalAdd("::ode::model::Time", ic, TimeObjectFactory(client))
#foreach($type in $types)
#if(!$type.abstract)
    conditionalAdd("::ode::model::${type.shortname}", ic,  ${type.shortname}ObjectFactory())
#end
#end

#stop