#*
 * $Id$
 *
 * Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *#
/*
 * $$Id$$
 */

// ModelObjectFactoryRegistry generated by pkg/api/resources/templates/java_objs_reg.vm

package ode.util;

import ode.util.ObjectFactoryRegistry;

import ode.model.DetailsI;
import ode.model.PermissionsI;
import ode.model.ElectricPotentialI;
import ode.model.FrequencyI;
import ode.model.LengthI;
import ode.model.PowerI;
import ode.model.PressureI;
import ode.model.TemperatureI;
import ode.model.TimeI;

import Ice.Communicator;
import Ice.Object;

import java.util.Map;
import java.util.HashMap;

public class ModelObjectFactoryRegistry extends ObjectFactoryRegistry {

    public void setIceCommunicator(Communicator ic, ode.client client) {

        // Non-conditional
        ic.addObjectFactory(DetailsI.makeFactory(client), DetailsI.ice_staticId());
        ic.addObjectFactory(PermissionsI.Factory, PermissionsI.ice_staticId());
        ic.addObjectFactory(ElectricPotentialI.makeFactory(client), ElectricPotentialI.ice_staticId());
        ic.addObjectFactory(FrequencyI.makeFactory(client), FrequencyI.ice_staticId());
        ic.addObjectFactory(LengthI.makeFactory(client), LengthI.ice_staticId());
        ic.addObjectFactory(PowerI.makeFactory(client), PowerI.ice_staticId());
        ic.addObjectFactory(PressureI.makeFactory(client), PressureI.ice_staticId());
        ic.addObjectFactory(TemperatureI.makeFactory(client), TemperatureI.ice_staticId());
        ic.addObjectFactory(TimeI.makeFactory(client), TimeI.ice_staticId());

        // Conditional
        super.setIceCommunicator(ic);
    }

    @Override
    public void setIceCommunicator(Communicator ic) {

        // Non-conditional
        ic.addObjectFactory(DetailsI.Factory, DetailsI.ice_staticId());
        ic.addObjectFactory(PermissionsI.Factory, PermissionsI.ice_staticId());
        ic.addObjectFactory(ElectricPotentialI.Factory, ElectricPotentialI.ice_staticId());
        ic.addObjectFactory(FrequencyI.Factory, FrequencyI.ice_staticId());
        ic.addObjectFactory(LengthI.Factory, LengthI.ice_staticId());
        ic.addObjectFactory(PowerI.Factory, PowerI.ice_staticId());
        ic.addObjectFactory(PressureI.Factory, PressureI.ice_staticId());
        ic.addObjectFactory(TemperatureI.Factory, TemperatureI.ice_staticId());
        ic.addObjectFactory(TimeI.Factory, TimeI.ice_staticId());

        // Conditional
        super.setIceCommunicator(ic);
    }

    @Override
    public Map<String, ObjectFactory> createFactories(Ice.Communicator ic) {
        Map<String, ObjectFactory> factories = new HashMap<String, ObjectFactory>();
#foreach($type in $types)
#if(!$type.abstract)
        factories.put("::ode::model::${type.shortname}",
                new ObjectFactory("::ode::model::${type.shortname}") {
                    @Override
                    public Object create(String name) {
                        return new ode.model.${type.shortname}I();
                    }
                });
#end
#end
        return factories;
    }
}
#stop