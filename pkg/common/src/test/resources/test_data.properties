####################################################
#
# This file provides queries and data for testing 
# the database layer. Properties can be of the form:
# 
#   key = select <rest of sql query>
#   key = <comma separated integers>
#
# Sql queries should be kept as simple and as portable
# as humanly possbile.
#
# Conventions:
# -----------
#   For keys of the form x.y, when x refers to a table
#   it should equal the unqualified Java class name.
#   y = count implies a List with a single Long value
#   y = ids implies a List of Longs
# 
#   For keys of the form x.y.z, 
#   x = unqualified class
#   y = adjective
#   z as y above
####################################################

#
#PDI
#
Project.count = select count(id) from project
Project.ids = select id from project
Dataset.count = select count(id) from dataset
Dataset.ids = select id from dataset
Image.count = select count(id) from image
Image.ids = select id from image

#
#CGCI
#
CategoryGroup.count = select count(id) from categorygroups
CategoryGroup.ids = select id from categorygroups
Category.count = select count(id) from category
Category.ids = select id from category

#
#ANNOTATIONS
#
Image.Annotated.ids = select i.id from image i, \
                      imageannotationlink ial \
                      where i.id = ial.parent group by \
                      i.id
Dataset.Annotated.ids = select d.id from dataset d, \
                      datasetannotationlink dal \
                      where d.id = dal.parent group by \
                      d.id

#
# Groups/Experimenter
#

Experimenter.ids = select id from experimenter
Experimenter.names = select ode_name from experimenter
Group.ids = select id from experimentergroup
Group.names = select name from experimentergroup

#
#CGCPaths
#
# Note: This will return null values in the images field because of the outer join. 
# This will have to be taken into account when using this query.
CGCPaths.all = select cg.id as cg, c.id as c, i.id as i \
				from categorygroup cg, categorygroupcategorylink cgcl, category c \
				left outer join categoryimagelink cil on (cil.parent = c.id) \
				left outer join image i on (cil.child = i.id) \
				where cgcl.parent = cg.id and cgcl.child = c.id 


# TODO not updated below this line !!!!!!!!!!!!!!!!!

Owner.MostImages =  select e.attribute_id as id, e.ode_name, g.attribute_id as group, count(i.image_id) \
					from experimenters e, groups g, images i \
					where i.experimenter_id = e.attribute_id and e.group_id = g.attribute_id \
					group by e.attribute_id, e.ode_name, g.attribute_id \
					order by count(i.image_id) desc;

Owner.MostImages.id = select e.attribute_id from experimenters e, images i \
					where i.experimenter_id = e.attribute_id \
					group by e.attribute_id, e.ode_name \
					order by count(i.image_id) \
					desc limit 1
Project.ofOwner.MostImages = select p.project_id from projects p \
					where p.owner_id in (\
					${Owner.MostImages.id} )
Dataset.ofOwner.MostImages  = select d.dataset_id from datasets d \
					where d.owner_id in (\
					${Owner.MostImages.id} )
CategoryGroup.ofOwner.MostImages = select cg.attribute_id from category_groups cg, module_executions mex \
					where cg.module_execution_id = mex.module_execution_id and mex.experimenter_id in (\
					${Owner.MostImages.id} )
Category.ofOwner.MostImages = select c.attribute_id from categories c, module_executions mex \
					where c.module_execution_id = mex.module_execution_id and mex.experimenter_id in (\
					${Owner.MostImages.id} )
Image.ofOwner.MostImages = select i.image_id from images i \
					where i.experimenter_id in (\
					${Owner.MostImages.id} )

#Counting
#
Counting.ProjectDatasetCount = select project_id as id, count(dataset_id) as count from project_dataset_map group by project_id
Counting.DatasetImageCount = select dataset_id as id, count(image_id) as count from image_dataset_map group by dataset_id
Counting.GroupExperimenterCount = select g.attribute_id as id, count(e.attribute_id) as count from groups g, experimenters e \
									where e.group_id = g.attribute_id group by g.attribute_id
#
# Concrete Data:
# -------------
# Some lines are for testing the parsing of this file itself
#
simple.test = 1, 2, 3, 4, 5
